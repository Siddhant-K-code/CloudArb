version: '3.8'

services:
  # PostgreSQL Database with TimescaleDB extension
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: cloudarb-postgres
    environment:
      POSTGRES_DB: cloudarb
      POSTGRES_USER: cloudarb
      POSTGRES_PASSWORD: cloudarb_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cloudarb -d cloudarb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cloudarb-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: cloudarb-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cloudarb-network

  # CloudArb API Backend
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: cloudarb-api
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=cloudarb
      - DB_USER=cloudarb
      - DB_PASSWORD=cloudarb_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SECRET_KEY=your-super-secret-key-change-in-production
      - ENVIRONMENT=development
      - DEBUG=true
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - cloudarb-network

  # CloudArb Frontend
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
    container_name: cloudarb-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      - cloudarb-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: cloudarb-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - api
    networks:
      - cloudarb-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: cloudarb-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - cloudarb-network

  # Data ingestion service
  ingestion:
    build:
      context: .
      dockerfile: docker/Dockerfile.ingestion
    container_name: cloudarb-ingestion
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=cloudarb
      - DB_USER=cloudarb
      - DB_PASSWORD=cloudarb_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
      - AZURE_SUBSCRIPTION_ID=${AZURE_SUBSCRIPTION_ID}
      - LAMBDA_API_KEY=${LAMBDA_API_KEY}
      - RUNPOD_API_KEY=${RUNPOD_API_KEY}
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cloudarb-network

  # ML forecasting service
  ml-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.ml
    container_name: cloudarb-ml
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=cloudarb
      - DB_USER=cloudarb
      - DB_PASSWORD=cloudarb_password
      - MODEL_STORAGE_PATH=/app/models
    volumes:
      - ./src:/app/src
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cloudarb-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: cloudarb-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/ssl:/etc/nginx/ssl
    depends_on:
      - api
      - frontend
    networks:
      - cloudarb-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  cloudarb-network:
    driver: bridge